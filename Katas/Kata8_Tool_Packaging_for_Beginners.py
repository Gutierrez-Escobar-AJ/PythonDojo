
"""
🥋 Kata 8: Tool Packaging for Beginners
📚 Learn how to organize your Python tools like a pro — even if you’re just starting out.
"""

# -----------------------------------------------------
# 🧠 Why Structure Matters
# If you’re writing more than one script, structure matters.
# Proper file/folder layout makes your tools easier to run, test, reuse, and share.
# -----------------------------------------------------

# -----------------------------------------------------
# 📁 Basic Project Structure
# -----------------------------------------------------
# my_project/
# ├── main.py               # Entry point (CLI launcher)
# ├── utils.py              # Reusable helper functions
# ├── data/                 # Input/output files
# │   └── sample_data.txt
# ├── results/              # Output location
# ├── README.md             # Project description
# └── requirements.txt      # Dependencies

# -----------------------------------------------------
# ✅ Let’s simulate this by using:
# - main.py (will use logic from utils.py)
# - utils.py (contains a helper function)
# - data/sample_data.txt (input)
# - results/output.txt (output)
# -----------------------------------------------------

# utils.py
def count_lines(file_path):
    """Count the number of non-empty lines in a file."""
    count = 0
    try:
        with open(file_path, "r") as f:
            for line in f:
                if line.strip():
                    count += 1
    except FileNotFoundError:
        print(f"❌ File not found: {file_path}")
    return count

# main.py
def main():
    from utils import count_lines

    input_path = "data/sample_data.txt"
    output_path = "results/output.txt"

    print("📁 Loading input file...")

    line_count = count_lines(input_path)
    print(f"✅ Total non-empty lines: {line_count}")

    # Save result to file
    with open(output_path, "w") as f:
        f.write(f"Non-empty line count: {line_count}\n")

    print(f"📄 Saved result to: {output_path}")

# -----------------------------------------------------
# 🧪 Simulated CLI Run
# -----------------------------------------------------

if __name__ == "__main__":
    main()

# -----------------------------------------------------
# 📌 Project Files You’ll Need:
# - utils.py (this file)
# - main.py (this script)
# - data/sample_data.txt (input file)
# - results/output.txt (autogenerated)

# -----------------------------------------------------
# 📦 Extras:
# requirements.txt → list dependencies (empty for now)
# README.md → describe what the project does

# -----------------------------------------------------
# 🧩 Summary:
# ✅ You now know:
# - Why project structure matters
# - How to create a reusable layout with `main()` and modules
# - How to organize input/output and reuse helpers

# 🎯 Your code isn’t just code anymore — it’s a project.
# -----------------------------------------------------
